# Generated by Django 2.2.10 on 2020-06-22 13:19

from django.db import migrations
from django.db import models
from parler.models import TranslatableModelMixin
from shared.const import OPTION

'''
Creating ROOT tree node
Creating TIMEREG tree node
Creating TIMEREG_TASK_MODE configuration variable
'''

def forwards_func(apps, schema_editor):
    ConfigTree = apps.get_model("general", "ConfigTree")
    ConfigTree.__bases__ = (models.Model, TranslatableModelMixin)
    ConfigTreeTranslation = apps.get_model("general", "ConfigTreeTranslation")
    ConfigKey = apps.get_model("general", "ConfigKey")
    ConfigKey.__bases__ = (models.Model, TranslatableModelMixin)
    ConfigKeyTranslation = apps.get_model("general", "ConfigKeyTranslation")

    #Creating top record in a tree. To validate reference we create it first without a parent key.
    ConfigTree.objects.bulk_create([
        ConfigTree(key='ROOT', parent=None),
    ])

    ConfigTree.objects.filter(key='ROOT').update(parent='ROOT')

    node = ConfigTree.objects.get(key='ROOT')
    ConfigTreeTranslation.objects.create(
        master_id = node.pk,
        language_code = 'lt',
        name = 'Pradžia',
    )
    ConfigTreeTranslation.objects.create(
        master_id = node.pk,
        language_code = 'nb',
        name = 'Starten',
    )

    node = ConfigTree(key='TIMEREG', parent=node)
    node.save()

    ConfigTreeTranslation.objects.create(
        master_id = node.pk,
        language_code = 'lt',
        name = 'Laiko registravimas',
    )
    ConfigTreeTranslation.objects.create(
        master_id = node.pk,
        language_code = 'nb',
        name = 'Timeregistrering',
    )

    cfg_key = ConfigKey(
        key = 'TIMEREG_TASK_MODE',
        node = node,
        type = OPTION,
    )
    cfg_key.save()
    
    ConfigKeyTranslation.objects.create(
        master_id = cfg_key.pk,
        language_code = 'lt',
        name = 'Darbo įvedimo būdas',
        description = 'Būdas, kuriuo laiko registravimo lange įvedami darbai. Gali būti pasirenkami iš sąrašo arba įrašomi tekstu.',
        metadata = '[(1000,"Sąrašas"), (2000,"Tekstas")], #DEFAULT:1000',
    )
    ConfigKeyTranslation.objects.create(
        master_id = cfg_key.pk,
        language_code = 'nb',
        name = 'Måten til å taste inn jobb',
        description = 'Måten til å taste inn jobb i timeregistrerings skjærmbildet. Kan velges fra en liste eller tastes inn som tekst.',
        metadata = '[(1000,"Liste"), (2000,"Tekst")], #DEFAULT:1000', 
    )


def reverse_func(apps, schema_editor):
    ConfigTree = apps.get_model("general", "ConfigTree")
    ConfigTreeTranslation = apps.get_model("general", "ConfigTreeTranslation")
    ConfigKey = apps.get_model("general", "ConfigKey")
    ConfigKeyTranslation = apps.get_model("general", "ConfigKeyTranslation")

    ConfigKeyTranslation.objects.filter(master_id='TIMEREG_TASK_MODE').delete()
    ConfigKey.objects.filter(key="TIMEREG_TASK_MODE").delete()
    ConfigTreeTranslation.objects.filter(master_id="TIMEREG").delete()
    ConfigTreeTranslation.objects.filter(master_id="ROOT").delete()
    ConfigTree.objects.filter(key="TIMEREG").delete()
    ConfigTree.objects.filter(key='ROOT').update(parent=None)
    ConfigTree.objects.filter(key="ROOT").delete()


def default_value(apps, obj):
    # Decode default value from configuration key's metadata field
    ConfigKeyTranslation = apps.get_model("general", "ConfigKeyTranslation")
    translation = ConfigKeyTranslation.objects.filter(master_id = obj.pk)[0] # Metadata from any available language
    if not translation:
        return ''
    metadata = translation.metadata
    pos = metadata.find('#DEFAULT:')
    if pos == -1:
        return ''
    else:
        pos_endofvalue = metadata.find(',', pos, len(metadata))
        if pos_endofvalue == -1:
            pos_endofvalue = len(metadata)

        return metadata[pos+9:pos_endofvalue].strip()


def forwards_func_values(apps, shema_editor):
    # Adds configuration values for each company.
    # Automatically fills in default values.
    Company = apps.get_model("general", "Company")
    ConfigKey = apps.get_model("general", "ConfigKey")
    ConfigValue = apps.get_model("general", "ConfigValue")
    for company in Company.objects.all():
        for config_key in ConfigKey.objects.all():
            values = ConfigValue.objects.filter(company = company, key = config_key)
            if len(values) == 0:
                ConfigValue.objects.create(
                    company = company,
                    key = config_key,
                    value = default_value(apps, config_key)
                )


def reverse_func_values(apps, schema_editor):
    ConfigValue = apps.get_model("general", "ConfigValue")
    ConfigValue.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('general', '0015_auto_20200623_1411'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
        migrations.RunPython(forwards_func_values, reverse_func_values),
    ]
